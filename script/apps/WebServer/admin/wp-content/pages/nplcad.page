<?npl
--[[
Title: NPL cad page
Author: leio
Date: 2016/7/11
Desc: 
]]

wp_enqueue_script("ace",						"/wp-includes/js/ace/ace.js"); 
wp_enqueue_script("angular",					"/wp-includes/js/angular/angular.min.js");
wp_enqueue_script("ngStorage",					"/wp-includes/js/angular/ngStorage.js");
wp_enqueue_script("ngSanitize",					"/wp-includes/js/angular/angular-sanitize.min.js");
wp_enqueue_script("ui-bootstrap-tpls",			"/wp-includes/js/angular/ui-bootstrap-tpls-1.3.3.min.js");
wp_enqueue_script("bootstrap-css",				"/wp-includes/js/bootstrap/css/bootstrap.min.css");

wp_enqueue_script("NPLCAD_App",					"/wp-content/pages/nplcad/app.js");
wp_enqueue_script("nplcadController",			"/wp-content/pages/nplcad/controllers/nplcadController.js");

wp_enqueue_style("nplcad_light",				"/wp-content/pages/nplcad/assets/css/light.css");


wp_enqueue_script("nplcad_threejs",				"/wp-content/pages/nplcad/js/libs/three.min.js"); 
wp_enqueue_script("nplcad_FileSaver",			"/wp-content/pages/nplcad/js/libs/FileSaver.min.js"); 
wp_enqueue_script("nplcad_angular-animate",		"/wp-content/pages/nplcad/js/libs/angular-animate.js"); 
wp_enqueue_script("nplcad_signals",				"/wp-content/pages/nplcad/js/libs/signals.min.js"); 
wp_enqueue_script("nplcad_ui",					"/wp-content/pages/nplcad/js/libs/ui.js"); 
wp_enqueue_script("nplcad_ui_three",			"/wp-content/pages/nplcad/js/libs/ui.three.js"); 
wp_enqueue_script("nplcad_Blob",				"/wp-content/pages/nplcad/js/libs/Blob.js"); 

wp_enqueue_script("nplcad_editor",				"/wp-content/pages/nplcad/js/Editor.js"); 
wp_enqueue_script("nplcad_viewport",			"/wp-content/pages/nplcad/js/Viewport.js"); 
wp_enqueue_script("nplcad_viewport_info",		"/wp-content/pages/nplcad/js/Viewport.Info.js"); 

wp_enqueue_script("nplcad_editorcontrols",		"/wp-content/pages/nplcad/js/controls/EditorControls.js"); 
wp_enqueue_script("nplcad_transformcontrols",	"/wp-content/pages/nplcad/js/controls/TransformControls.js"); 



local code = request:get("code");
local function CreateSandBoxEnv()
  local env = {
    alert = _guihelper and _guihelper.MessageBox or commonlib.echo,
    GameLogic = commonlib.gettable("GameLogic"),
    cmd = GameLogic and GameLogic.RunCommand or commonlib.echo,
  };
  local meta = {__index = _G};
	setmetatable (env, meta);
  return env;
end
local function RunWithResult(output)
  if(not code or code == "") then
    return;
  end
	local fromLogPos = commonlib.log.GetLogPos();
	local code_func, errormsg = loadstring(code);
	if(code_func) then
		local env = CreateSandBoxEnv();
		setfenv(code_func, env);
		local ok, result = pcall(code_func);
		if(output) then
			if(ok) then
				if(type(env.main) == "function") then
					setfenv(env.main, env);
					ok, result = pcall(env.main);
				end
			end
			output.success = ok;
			output.result = result;
		else
			if(ok) then
				echo("<p style='color:green'>success!</p>")
				echo(string.gsub(sanitize(ParaGlobal.GetLog(fromLogPos, -1) or ""), "\n", "<br/>"));
			else
				echo("<p style='color:red'>Runtime error: </p>")
				echo(sanitize(result));
			end
		end
	else
		if(output) then
			output.compile_error = errormsg;
		else
			echo("<p style='color:red'>Syntax error: </p>")
			echo(sanitize(errormsg));
		end
	end
end

if(is_ajax()) then
	add_action('wp_ajax_runcode', function()
		local output = {};
		RunWithResult(output);
		wp_send_json(output,true);
    end)
	return;
end
?>
<style type="text/css" media="screen">
	#view_container { 
		position: releative;
		width:100%;
    }
    
	button{
		position: releative;
		width:100%;
		height: 30px;
	}
	 #code_editor { 
		position: releative;
		width:100%;
		min-height:560px;
    }
	#savecode{
		position: releative;
		width:100%;
		height: 30px;
	}

</style>
<script>
	$(function(){
		
	});
	
</script> 
<div class="title">NPLCAD</div></br>
<div ng-app="NPLCAD_App" ng-controller="nplcadController" class="container-fluid">
	<div class="row" >
		<div id="left" class="col-md-6">
			<div id="view_container" style="min-height:560px;"></div>

				<div class="col-md-4">
				<button ng-click="onRunCode()" class="btn btn-primary" id="runcode" >Compile</button>			
				</div>
				<div class="col-md-4">

					<div class="btn-group" uib-dropdown is-open="status.isopen">
					  <button id="single-button" type="button" class="btn btn-success" uib-dropdown-toggle ng-disabled="disabled">
						Code example <span class="caret"></span>
					  </button>
					  <ul class="dropdown-menu" uib-dropdown-menu role="menu" aria-labelledby="single-button">
						<li role="menuitem" ng-click="changeEditorContent(1)"><a href="#">Cube, sphere and cylinder</a></li>
						<li role="menuitem" ng-click="changeEditorContent(2)"><a href="#">Subtract</a></li>
						<li role="menuitem" ng-click="changeEditorContent(3)"><a href="#">Intersect</a></li>
						<li role="menuitem" ng-click="changeEditorContent(4)"><a href="#">Comparsion</a></li>
						<li class="divider"></li>
						
						<li role="menuitem" ng-click="changeEditorContent(5)"><a href="#">Example five</a></li>
					  </ul>
					</div>
				</div>	
				<section id="text-demo">
				<br><h3>Saving 3D geometry </h3>
				
				<form id="text-options">
					<label>Filename: 
					<input type="text" class="filename" id="wtf" placeholder="File name"/> .stl</label>
					<input type="submit" ng-click="onRunCode(true)" value="Save"/>
				</form>
				</section>
		</div>
		<div id="right" class="col-md-6" style="background-color:white; boder-style:none">
			<div>
				<div>
					<button type="button" class="btn btn-info" ng-click="isCollapsed = !isCollapsed; isCollapsedHorizontal = !isCollapsedHorizontal">Read coding guide</button>
				</div>

				
				<div uib-collapse="isCollapsed">
					<div class="well well-lg" style="min-height:560px;">
						Write coding guide here
					</div>
					
				</div>
			</div>
			
			<div uib-collapse="isCollapsedHorizontal">
				
				<div id="code_editor" >--code here
	NPL.load("(gl)script/ide/CSG/CSG.lua");
	local cube_center = {0,1,0};
	local cube_radius = {10,2,1};

	local sphere_center = {0,0,0};
	local sphere_radius = 4;
	local sphere_slices = 16;
	local sphere_stacks = 8;

	local cube_options = {
		center = cube_center,
		radius = cube_radius,
	}
	local sphere_options = {
		center = sphere_center,
		radius = sphere_radius,
		slices = sphere_slices,
		stacks = sphere_stacks,
	}

	local CSG = commonlib.gettable("CSG.CSG");
	local cube = CSG.cube(cube_options);
	local sphere = CSG.sphere(sphere_options);
	local csg_node = cube:union(sphere);
	local vertices,indices,normals,colors = CSG.toMesh(csg_node);
	return {vertices,indices,normals,colors}; 
				</div>
			</div>
			</br>
				
		</div>
		
		<div class="row" style="padding-left:30px;padding-right:30px;" id="logWnd">
		</div>
	</div>
</div>
<div id="example" hidden="hidden">

	<div id="code_example1">--Cube, sphere and cylinder
	NPL.load("(gl)script/ide/CSG/CSG.lua");
	
	--set cube parameters: center and radius.
	local cube_center = {0,1,8};
	local cube_radius = {10,2,1};
	
	--Set sphere parameters: center, radius, slices, stacks.The slices 
	--and stacks parameters control the tessellation along 
	--the longitude and latitude directions.
	local sphere_center = {0,0,1};
	local sphere_radius = 4;
	local sphere_slices = 16;
	local sphere_stacks = 8;
	
	--Set cylinder parameters: start, end, radius, slice.The slices 
	--parameter controls the tessellation.
	local cylinder_start = {0,-4,-8};
	local cylinder_end = {0,4,-8};
	local cylinder_radius = 4;
	local cylinder_slice = 8;
	
	--Get all parameters in a table.
	local cube_options = {
		center = cube_center,
		radius = cube_radius,
	}
	local sphere_options = {
		center = sphere_center,
		radius = sphere_radius,
		slices = sphere_slices,
		stacks = sphere_stacks,
	}	
	local cylinder_options = {
		["from"] = cylinder_start,
	    ["to"] = cylinder_end,
		radius = cylinder_radius,
		slice = cylinder_slice,
	}
	--Render 3D geometry.
	local CSG = commonlib.gettable("CSG.CSG");
	local cube = CSG.cube(cube_options);
	local sphere = CSG.sphere(sphere_options);
	local cylinder = CSG.cylinder(cylinder_options);
	local csg_node = cube:union(sphere);
	csg_node = csg_node:union(cylinder);
	local vertices,indices,normals,colors = CSG.toMesh(csg_node);
	return {vertices,indices,normals,colors}; 
	</div>			
	<div id="code_example2" >--Subtract
		-- A:subtract(B)
		-- Return a new CSG solid representing space in this solid but 
		-- not in the solid `csg`. Neither this solid nor the solid
		-- `csg` are modified.
		-- 
		--     +-------+            +-------+
		--     |       |            |       |
		--     |   A   |            |       |
		--     |    +--+----+   =   |    +--+
		--     +----+--+    |       +----+
		--          |   B   |
		--          |       |
		--          +-------+
		-- 	
		NPL.load("(gl)script/ide/CSG/CSG.lua");
		local cube_center = {0,1,0};
		local cube_radius = {10,2,1};

		local sphere_center = {0,0,0};
		local sphere_radius = 4;
		local sphere_slices = 16;
		local sphere_stacks = 8;

		local cube_options = {
		center = cube_center,
		radius = cube_radius,
		}
		local sphere_options = {
		center = sphere_center,
		radius = sphere_radius,
		slices = sphere_slices,
		stacks = sphere_stacks,
		}

		local CSG = commonlib.gettable("CSG.CSG");
		local cube = CSG.cube(cube_options);
		local sphere = CSG.sphere(sphere_options);
		local csg_node = cube:subtract(sphere);
		local vertices,indices,normals,colors = CSG.toMesh(csg_node);
		return {vertices,indices,normals,colors}; 
	</div>	
	<div id="code_example3">--Intersect
	-- Return a new CSG solid representing space both this solid and
	-- in the solid `csg`. Neither this solid nor the solid `csg` 
	-- are modified.
	--
	--     A:intersect(B)
	-- 
	--     +-------+
	--     |       |
	--     |   A   |
	--     |    +--+----+   =   +--+
	--     +----+--+    |       +--+
	--          |   B   |
	--          |       |
	--          +-------+
	-- 
		NPL.load("(gl)script/ide/CSG/CSG.lua");
		local cube_center = {0,2,0};
		local cube_radius = {10,2,1};

		local sphere_center = {0,0,0};
		local sphere_radius = 4;
		local sphere_slices = 16;
		local sphere_stacks = 8;

		local cube_options = {
		center = cube_center,
		radius = cube_radius,
		}
		local sphere_options = {
		center = sphere_center,
		radius = sphere_radius,
		slices = sphere_slices,
		stacks = sphere_stacks,
		}

		local CSG = commonlib.gettable("CSG.CSG");
		local cube = CSG.cube(cube_options);
		local sphere = CSG.sphere(sphere_options);
		local csg_node = sphere:intersect(cube);
		local vertices,indices,normals,colors = CSG.toMesh(csg_node);
		return {vertices,indices,normals,colors}; 
	</div>	
		<div id="code_example4">

		NPL.load("(gl)script/ide/CSG/CSG.lua");

		local CSG = commonlib.gettable("CSG.CSG");
		
        local a = CSG.cube({ center= {-0.25, -0.25, -0.25} });
        local b = CSG.sphere({ radius = 1.3, center = {0.25, 0.25, 0.25} });
	
	    local c = CSG.cube({ center= {-4.25, -0.25, -0.25} });
        local d = CSG.sphere({ radius = 1.3, center = {-3.75, 0.25, 0.25} });
	
	    local e = CSG.cube({ center= {3.75, -0.25, -0.25} });
        local f = CSG.sphere({ radius = 1.3, center = {4.25, 0.25, 0.25} });
	
        local csg_node =(c:subtract(d)):union(a:union(b)):union(e:intersect(f));
				
		local vertices,indices,normals,colors = CSG.toMesh(csg_node);
		return {vertices,indices,normals,colors}; 
		
		</div>
	<div id="code_example5">
		NPL.load("(gl)script/ide/CSG/CSG.lua");

		local CSG = commonlib.gettable("CSG.CSG");
		
        local a = CSG.cube();
        local b = CSG.sphere({ radius = 1.35, stacks = 12 });
        local c = CSG.cylinder({ radius= 0.7, ["from"] = {-1, 0, 0}, ["to"] = {1, 0, 0} });
        local d = CSG.cylinder({ radius= 0.7, ["from"] = {0, -1, 0}, ["to"] = {0, 1, 0} });
        local e = CSG.cylinder({ radius= 0.7, ["from"] = {0, 0, -1}, ["to"] = {0, 0, 1} });		
        local csg_node = a:intersect(b):subtract(c:union(d):union(e));
		
		
		
		local vertices,indices,normals,colors = CSG.toMesh(csg_node);
		return {vertices,indices,normals,colors}; 
	</div>
</div>